apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-notification-service
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: task-management-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.service.port }}"
    prometheus.io/path: "/metrics"
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicaCount | default 3 }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 10 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: notification-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: notification-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.port }}"
        prometheus.io/path: "/metrics"
    spec:
      # Security Context for Pod
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      
      # Pod Anti-Affinity for High Availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - notification-service
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: notification-service
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        
        # Container Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Resource Limits and Requests
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu | default "1" }}
            memory: {{ .Values.resources.limits.memory | default "1Gi" }}
          requests:
            cpu: {{ .Values.resources.requests.cpu | default "200m" }}
            memory: {{ .Values.resources.requests.memory | default "256Mi" }}
        
        # Ports Configuration
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: websocket
          containerPort: 3001
          protocol: TCP
        
        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Environment Variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: WEBSOCKET_PORT
          value: "3001"
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-notification-secrets
              key: rabbitmq-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-notification-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-notification-secrets
              key: jwt-secret
        
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
          readOnly: true
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: {{ .Release.Name }}-notification-config
      
      # Service Account
      serviceAccountName: {{ .Release.Name }}-notification-service
      
      # Node Selection
      nodeSelector:
        kubernetes.io/os: linux
        {{- with .Values.nodeSelector }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      
      # Tolerations
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}