apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-service
  namespace: task-management
  labels:
    app: search-service
    component: search
    part-of: task-management
    version: 1.0.0
    managed-by: kubernetes
  annotations:
    description: "Search service deployment for task management system"
    maintainer: "platform-team@company.com"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: search-service
  template:
    metadata:
      labels:
        app: search-service
        version: 1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3003"
        prometheus.io/path: "/metrics"
        checksum/config: "${CONFIG_CHECKSUM}"
        co.elastic.logs/enabled: "true"
    spec:
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: search-service
          image: task-management/search-service:1.0.0
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          resources:
            requests:
              cpu: "1"
              memory: "2Gi"
            limits:
              cpu: "2"
              memory: "4Gi"
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/startup
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3003"
            - name: ELASTICSEARCH_HOST
              valueFrom:
                configMapKeyRef:
                  name: search-service-config
                  key: elasticsearch-host
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: search-service-secrets
                  key: elasticsearch-password
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: elasticsearch-certs
              mountPath: /etc/elasticsearch/certs
              readOnly: true
      volumes:
        - name: tmp
          emptyDir: {}
        - name: elasticsearch-certs
          secret:
            secretName: elasticsearch-certs
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - search-service
                topologyKey: topology.kubernetes.io/zone